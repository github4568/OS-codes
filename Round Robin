#include <stdio.h>
#include <stdbool.h>

void findwaitingtime(int n, int burst_time[], int arrival_time[], int waiting_time[], int quantum) {
    int remaining_time[n];
    int completion_time[n];
    int current_time = 0;
    bool process_completed;

    // Initialize remaining times with burst times
    for (int i = 0; i < n; i++) {
        remaining_time[i] = burst_time[i];
    }

    while (true) {
        process_completed = true;

        for (int i = 0; i < n; i++) {
            // Process is available and has remaining time
            if (remaining_time[i] > 0 && arrival_time[i] <= current_time) {
                process_completed = false; // At least one process is not completed

                if (remaining_time[i] > quantum) {
                    current_time += quantum;
                    remaining_time[i] -= quantum;
                } else {
                    current_time += remaining_time[i];
                    remaining_time[i] = 0;
                    completion_time[i] = current_time;
                }
            }
        }

        if (process_completed) break;
    }

    // Calculate waiting times using completion times
    for (int i = 0; i < n; i++) {
        waiting_time[i] = completion_time[i] - burst_time[i] - arrival_time[i];
        if (waiting_time[i] < 0) waiting_time[i] = 0; // Avoid negative waiting times
    }
}

void findturnaroundtime(int n, int burst_time[], int waiting_time[], int turnaround_time[]) {
    for (int i = 0; i < n; i++) {
        turnaround_time[i] = burst_time[i] + waiting_time[i];
    }
}

void displayresults(int n, int burst_time[], int arrival_time[], int waiting_time[], int turnaround_time[]) {
    printf("\nProcess\tArrival Time\tBurst Time\tWaiting Time\tTurnAround Time\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t\t%d\t\t%d\t\t%d\t\t%d\n", i + 1, arrival_time[i], burst_time[i], waiting_time[i], turnaround_time[i]);
    }
}

int main() {
    int n, quantum;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    int burst_time[n], arrival_time[n], waiting_time[n], turnaround_time[n];

    printf("Enter the Arrival Time and Burst Time for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("\nProcess P%d:\n", i + 1);
        printf("Arrival Time: ");
        scanf("%d", &arrival_time[i]);
        printf("Burst Time: ");
        scanf("%d", &burst_time[i]);
    }

    printf("Enter the time quantum: ");
    scanf("%d", &quantum);

    findwaitingtime(n, burst_time, arrival_time, waiting_time, quantum);
    findturnaroundtime(n, burst_time, waiting_time, turnaround_time);

    displayresults(n, burst_time, arrival_time, waiting_time, turnaround_time);

    return 0;
}
