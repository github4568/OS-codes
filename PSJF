#include <stdio.h>
#include <limits.h>

void preemptiveSJF(int n, int arrival_time[], int burst_time[]) {
    int remaining_time[n], completion_time[n], waiting_time[n], turnaround_time[n];
    int current_time = 0, completed = 0, shortest = -1, min_time = INT_MAX;

    // Initialize remaining burst times
    for (int i = 0; i < n; i++) {
        remaining_time[i] = burst_time[i];
    }

    // Loop until all processes are completed
    while (completed < n) {
        // Find the shortest job available
        for (int i = 0; i < n; i++) {
            if (arrival_time[i] <= current_time && remaining_time[i] > 0 && remaining_time[i] < min_time) {
                min_time = remaining_time[i];
                shortest = i;
            }
        }

        if (shortest == -1) { // If no process is available
            current_time++;
            continue;
        }

        // Execute the shortest job
        remaining_time[shortest]--;
        min_time = remaining_time[shortest];

        if (min_time == 0) {
            min_time = INT_MAX;
        }

        if (remaining_time[shortest] == 0) {
            completed++;
            completion_time[shortest] = current_time + 1;
            waiting_time[shortest] = completion_time[shortest] - arrival_time[shortest] - burst_time[shortest];
            if (waiting_time[shortest] < 0) {
                waiting_time[shortest] = 0;
            }
        }
        current_time++;
    }

    // Calculate Turnaround Time
    for (int i = 0; i < n; i++) {
        turnaround_time[i] = burst_time[i] + waiting_time[i];
    }

    // Display results
    printf("\nPreemptive SJF Scheduling:\n");
    printf("Process\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t\t%d\t\t%d\t\t%d\t\t%d\n", i + 1, arrival_time[i], burst_time[i], waiting_time[i], turnaround_time[i]);
    }
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    int arrival_time[n], burst_time[n];

    printf("Enter arrival time and burst time for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Process P%d:\n", i + 1);
        printf("Arrival Time: ");
        scanf("%d", &arrival_time[i]);
        printf("Burst Time: ");
        scanf("%d", &burst_time[i]);
    }

    preemptiveSJF(n, arrival_time, burst_time);

    return 0;
}
